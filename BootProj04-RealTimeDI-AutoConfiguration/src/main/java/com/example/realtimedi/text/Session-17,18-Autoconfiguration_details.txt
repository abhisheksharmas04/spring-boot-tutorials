-> Spring boot 2.5(Test in 2.5) Datasource alogrithm towards AutoConfiguration is :
    (1).HikariCP: Default and part of spring-boot-starter-jdbc.
    (2).TomcatCp: if HikariCP jar is not available and Tomcat-jdbc jar is placed.(This connection pool is used as standalone and server managed connection pool)
    (3).ApacheDBCP2: if HikariCP,TomcatCp jar is not available and ApacheDBCP2 jar is placed.
    (4).OracleUCP: if HikariCP,TomcatCp,ApacheDBCP2 jar is not available and OracleUCP jar is placed.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Session 18

Can we disable AutoConfiguration of certain spring beans even thou startes are added?
--> Yes we can do by using exclude param of @SpringBootApplication annotation.
    EG: @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class,
		JdbcTemplateAutoConfiguration.class}) /*To exclude the AutoConfiguration*/
        public class BootProj04RealTimeDiAutoConfigurationApplication {
                .......
        }
    In the above case we have to write @Bean method to create our choice classes object and to make them as spring bean either in @Configuration class or in @SpringBootApplication application class.
    EG: @Configuration
        public class PersistanceConfig {
            
            @Autowired
            private Environment env;
            // By default all the information of properties file will come and store into environment 	object. IOC container creates Environment object automatically as a part of starters.
            
            @Bean(name = "C3p0ds")
            public ComboPooledDataSource createDs() throws Exception {
                ComboPooledDataSource c3p0ds = new ComboPooledDataSource();
                c3p0ds.setDriverClass(env.getProperty("spring.datasource.driver-class-name"));
                c3p0ds.setJdbcUrl(env.getProperty("spring.datasource.url"));
                c3p0ds.setUser(env.getProperty("spring.datasource.username"));
                c3p0ds.setPassword(env.getProperty("spring.datasource.password"));
                
                return c3p0ds;
            }

        }
    In this case application.properties file:
        spring.datasource.driver-class-name=com.mysql.ci.jdbc.Driver
        spring.datasource.url=jdbc:mysql:///advancejava
        spring.datasource.username=root
        spring.datasource.password=java@jdbc
        spring.datasource.hikari.minimum-idle=10
        spring.datasource.hikari.maximum-pool-size=100
        spring.datasource.hikari.idle-timeout=20

Q)-> When should we use @Bean methods by disabling AutoConfiguration on spring beans?
Ans)-> If we are not happy with the classes that are particapting in AutoConfiguration and we want to use our choice class then go for above @Bean methods.
    EG: In spring boot 2.4/2.5 there is no provision to work with other than DS alogrithm conn pools related datasource classes by specifing datasource class name in spring.datasource.type property. In that suitation disable AutoConfiguration on datasource and go for @Bean methods in @Configuration class.

